function ProcessQueue(a,c,b){this._thisArg=a;this._method=c;this._args=b}ProcessQueue.prototype.execute=function(){this._method.apply(this._thisArg,this._args)};var NodeSocketCommon={nodesocketSignature:"nsockv01",EnumConnectionState:{Disconnected:0,Connected:1,Verified:2,Processing:3,WebSocketConnected:4,_max:5},EnumExecutionCode:{RequestMaster:0,RequestSlave:1,ExecFunction:2,_max:3},EnumDataType:{"byte":0,ubyte:1,"short":2,ushort:3,"int":4,uint:5,"float":6,"double":7,string:8,"boolean":9,_max:10},EnumNodeResponse:{Okay:0,NoResult:1,InvalidFunction:2,NodeError:3,InvalidExecCode:4,NotAllowed:5,_max:6},EnumNodeResponseErrorString:{0:"Okay",1:"Okay",2:"An invalid function was specified",3:"Node reported an internal error",4:"An invalid execution code was specified",5:"Remote functions are not allowed from this node, remote is the current master"},ProcessQueue:ProcessQueue};function NodeSocketClient(a,c,b){this._options=b;this._port=a;this._ipaddress=c;this._socket=undefined;this._functions={};this._state=NodeSocketCommon.EnumConnectionState.Disconnected;this._master=false;this._processCallback=undefined;this._processQueue=[]}NodeSocketClient.prototype.emit=function(b){var a="on"+b;if(a in this){this[a].apply(this,Array.prototype.slice.call(arguments,1))}else{if(b==="error"&&arguments[1] instanceof Error){throw arguments[1]}}};NodeSocketClient.prototype.requestMaster=function(){if(this._state===NodeSocketCommon.EnumConnectionState.Verified){this._socket.send(String.fromCharCode(NodeSocketCommon.EnumExecutionCode.RequestMaster));this._master=true}else{this.emit("error",new Error("A master request must be done over an idle connection"),this._socket);return false}return true};NodeSocketClient.prototype.requestSlave=function(){if(!this._options.denyMasterRequests){if(this._state===NodeSocketCommon.EnumConnectionState.Verified){this._master=false;this._socket.send(String.fromCharCode(NodeSocketCommon.EnumExecutionCode.RequestSlave))}else{this.emit("error",new Error("A slave request must be done over an idle connection"),this._socket);return false}}else{self.emit("error",new Error("Unable to request as a slave when the current connection denies a remote master"),this._socket);return false}return true};NodeSocketClient.prototype._nodeDataReceived=function(a){this.emit("data",this._socket,a);var b=a.length;if(this._state===NodeSocketCommon.EnumConnectionState.Connected){if(NodeSocketCommon.nodesocketSignature===a){this._state=NodeSocketCommon.EnumConnectionState.Verified;b=NodeSocketCommon.nodesocketSignature.length;this.requestMaster();this.emit("verified",this._socket)}}};NodeSocketClient.prototype._nodeSocketError=function(a){console.log(a)};NodeSocketClient.prototype._nodeClosed=function(a){console.log(a)};NodeSocketClient.prototype._nodeConnected=function(){this._state=NodeSocketCommon.EnumConnectionState.Connected;var a=this;this._socket.onmessage=function(b){a._nodeDataReceived.call(a,b.data)};this._socket.onerror=function(b){a._nodeSocketError.call(a,b)};this._socket.onclose=function(b){a._nodeClosed.call(a,b)};this._socket.send(NodeSocketCommon.nodesocketSignature)};NodeSocketClient.prototype.connect=function(){this._socket=new WebSocket("ws://"+this._ipaddress+":"+this._port,"nodesocket");var a=this;this._socket.onopen=function(){a._nodeConnected.call(a)}};